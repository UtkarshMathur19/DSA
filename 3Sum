Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Code ->

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        for(int i=0;i<n;i++){
            int a = nums[i];
            int target = -a;
            int l = i+1;
            int r = n-1;
            
            while(l<r){
                if(nums[l] + nums[r] == target){
  
                    ans.push_back({nums[i], nums[l], nums[r]});
                    
                    while(l<r&&nums[l] == nums[l+1])
                        l++;
                    while(l<r&&nums[r] == nums[r-1])
                        r--;
                    
                    l++;r--;
                }
                
                else if(nums[l] + nums[r] > target)
                    r--;
                else
                    l++;
            }
            while(i+1<n&&nums[i+1] == nums[i])
                i++;
        }
        return ans;
        
    }
};
