Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Code ->

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool arraySortedOrNot(vector<int> &ans, int n)
{
    
    if (n == 0 || n == 1)
        return true;
 
    for (int i = 1; i < n; i++){
 
        if (ans[i - 1] > ans[i])
            return false;
        if(ans[i-1] == ans[i])
            return false;
    }
    
    return true;
}
    
    void inorder(TreeNode *root, vector<int> &ans){
        if(root == NULL)
            return;
        
        inorder(root->left, ans);
        ans.push_back(root->val);
        inorder(root->right, ans);
    }
    
    bool isValidBST(TreeNode* root) {
        vector<int> ans;
        inorder(root, ans);
        int n = ans.size();
        return arraySortedOrNot(ans,n);
    }
};
// logic : check if the inorder traversal of a tree is sorted or not
