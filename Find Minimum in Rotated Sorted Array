Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

Code ->

// class Solution {
// public:
//     int findMin(vector<int>& nums) {
//         sort(nums.begin(), nums.end());
//         return nums[0];
//     }
// };


// class Solution {
    
//     int search(vector<int>& nums, int l, int r){
//         if(l == r)
//             return nums[l];
//         // int mid = l+(r-l)/2;
//         int mid = (l+r)/2;
        
//         if(nums[mid]>nums[r])
//             return search(nums, mid+1, r);
//         if(nums[mid]<nums[r])
//             return search(nums, l, mid);
//         return nums[r]; // if both nums[mid] == nums[r]
//     }
    
// public:
//     int findMin(vector<int>& nums) {
//         return search(nums, 0, nums.size()-1);
//     }
// };


class Solution {
public:
    int findMin(vector<int>& nums) {
        int l=0, r=nums.size()-1;
        
        
        while(l<r)
        {
            int mid = l+(r-l)/2;
            if(nums[mid]>nums[r])
                l = mid+1;
            else if(nums[mid]<nums[r])
                r = mid;
            else
                nums[r];
        }
        return nums[l];
    }
};

