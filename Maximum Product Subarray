Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

Code ->

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int prod = nums[0];
        int maxi = prod;
        int mini = prod;
        
        for(int i=1;i<nums.size();i++){
            if(nums[i]<0)
                swap(maxi, mini);
            maxi = max(nums[i], maxi*nums[i]);
            mini = min(nums[i], mini*nums[i]);
            prod = max(prod, maxi);
            
        }
        return prod;
    }
};



GFG

class Solution{
public:

	// Function to find maximum product subarray
	long long maxProduct(vector<int> arr, int n) {
	    long long int maxP = INT_MIN, prod = 1;
	    for(int i=0;i<arr.size();i++){
	        prod*=arr[i];
	        maxP = max(maxP, prod);
	        if(prod == 0)
	            prod = 1;
	    }
	    
	    prod = 1;
	    for(int i=arr.size()-1;i>=0;i--){
	        prod*=arr[i];
	        maxP = max(maxP, prod);
	        if(prod == 0)
	            prod = 1;
	    }
	    return maxP;
	}
};
