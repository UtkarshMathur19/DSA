Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

Code ->

class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map <char,int> hash_s;
        unordered_map <char, int> hash_t;
        
        int s_len = s.size(), t_len = t.size();
        
        if(s_len<t_len)
            return "";
        
        for(int i=0;i<t_len;i++){
            hash_t[t[i]]++;
        }
        
        int count = 0, start = 0, min_len = INT_MAX, start_ind = -1;
        
        for(int j=0;j<s_len;j++){
            hash_s[s[j]]++;
            
            if(hash_s[s[j]]<=hash_t[s[j]])
                count++;
            
            if(count == t_len){
                while(hash_s[s[start]]>hash_t[s[start]] || hash_t[s[start]] == 0){
                    if(hash_s[s[start]]>hash_t[s[start]]){
                        hash_s[s[start]]--;
                        start++;
                    }
                }
                                                
                if(min_len>j-start+1){
                    min_len = j-start+1;
                    start_ind = start;
                }                                
            }                               
        }
        if(start_ind == -1)
            return "";
        return s.substr(start_ind, min_len);                                     
    }
};
