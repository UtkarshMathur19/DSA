Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Code ->

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    void reverse(ListNode *start, ListNode *end){
        ListNode *prev = NULL, *curr = start, *nex = start->next;
        while(prev!=end){
            curr->next = prev;
            prev = curr;
            curr = nex;
            if(nex!=NULL)
                nex = nex->next;
        }
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == NULL || head->next == NULL || k == 1)
            return head;
        ListNode *start = head, *end = head;
        int i = k-1;
        while(i){
            end = end->next;
            if(end == NULL)
                return head;
            i--;
        }
        ListNode *nextHead = reverseKGroup(end->next, k);
        reverse(start,end);
        start->next = nextHead;
        return end;
    }
};
