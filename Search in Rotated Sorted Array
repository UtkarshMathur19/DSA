There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Code ->

// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
//         for(int i=0;i<nums.size();i++){
//             if(nums[i] == target)
//                 return i;
            
//         }
//         return -1;
      

//     }
// };

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0, r=nums.size()-1;
        
        while(l<=r){
            int mid = l+(r-l)/2;
            if(target == nums[mid])
                return mid;   
            if(nums[l]<=nums[mid]){
                if(target<=nums[mid] && nums[l]<=target)
                    r = mid-1;
                else
                    l = mid+1;
            }
            
            else{
                if(target>=nums[mid] && nums[r]>=target)
                    l = mid+1;
                else
                    r = mid-1;
            }
        }
        return -1;

    }
};
